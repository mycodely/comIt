//Definir una función que, dada una serie de números, me devuelva la suma de todos.

const array = [1,2,3,4,5]
let resultado = 0;

array.forEach(function (devolver) {
    resultado = resultado + devolver;
})


//Clase 16-10 Repaso


function info(msj) {
    console.log(`info: ${msj}`);
}

info("mensaje recibido y enviado");


function patoba(edad){
    if(edad >=18) {
            console.log("pasa");
        }
    else console.log("No pasa");}
    
var imprimirMensajeBienvenida = patoba(21)

// EJERCICIOS 16-10

//PARTE 1 VARIABLES Y PARÁMETROS

/* 1) Crear una función "decirPersonalidad", la cual reciba un objeto por parámetro y muestre por consola su atributo con nombre
"personalidad". Una vez definida la función, llamarla de 2 formas:
A) definiendo un objeto llamado "persona" en una variable, y luego llamar la función "decirPersonalidad".
b) llamándo directamente a la función "decirPersonalidad" definiendo un objeto en su parámetro.
*/
var persona = new Object();
persona.personalidad = "amistosa"

function decirPersonalidad(persona){
    return console.log(persona.personalidad)}

decirPersonalidad(persona);


/*
2) Crear una función "aumentarContador", la cual aumente en 1 la variable "contador" cuando se ejecute.
No hace falta definirle parámetros.
*/
var contador= 0;
function aumentarContador (){
    return contador++;
}

/*

3) Definir una variable llamada "variable", con valor "soy una variable". Luego, crear una función "variableParametro",
la cual tenga un parámetro con nombre "variable", la misma debe hacer console.log del parámetro cuando se ejecuta. Responder:

a) Qué valor va a imprimir por consola cuando ejecuto la función "variableParametro" con el valor "soy un parametro"?
// imprimira "soy un parametro"´

b) Qué valor va a imprimir por consola cuando ejecuto la función "variableParametro" con el valor que tenga la variable "variable"?
va a imprimir "soy una variable"

c) Qué valor va a imprimir por consola si vuelvo a definir la función "variableParametro" sin parámetros, y la
ejecuto con el valor "soy un parametro"?
Va a imprimir "soy un parametro"

d) Qué podrían hacer para no caer en confusión cuando tienen un parámetro con mismo nombre que una variable definida afuera de la función?
No utilizar el mismo nombre o volver a definirla adentro para que viva y muera en el ciclo usando let
*/

var variable = "soy una variable"

function variableParametro(variable){
    return console.log(variable);
}




/*

//Parte 2

/*Para hacer los siguientes ejercicios, vamos a usar la función Object.assign.

Esta función copia todos los atributos de un objeto fuente, a otro destino.

var destino = { a: 1, b: 2 }
var fuente = { b: 3, c: 4 }

Object.assign(destino, fuente)

console.log(destino) //> { a: 1, b: 3, c: 4 }
console.log(fuente) //> { b: 3, c: 4 }

Prueben algunos ejemplos en la consola para que quede claro el comportamiento.

Ejercicios:

1) Crear un objeto "programador", el cual tenga como atributos:
        - nombre: texto
        - quemades: número entre 0 y 10.
        - energia: número entre 0 y 10.
        - empleado: false
*/
function intervalo(elemento){
    var numero = parseInt(elemento);

    if(isNaN(numero)){
      alert('Ingrese solo números.');
      elemento.focus();
      elemento.select();
      return false;
    }
    //Validamos que se cumpla el rango
    if(numero<0 || numero>10){
      alert('Solo se permite el siguiente rango: 0 - 10');
      elemento.focus();
      return false;
    }
    return true;
  }

var texto = console.log();

var programador = new Object();
programador.nombre = texto();
programador.quemades= intervalo();
programador.energia=  intervalo();
programador.empleado= false;
/*


2)Crear una función "esProductivo", que reciba un programador y retorne:
        - true cuando el quemades sea menor a energia.
        - false cuando no pase lo anterior. 
*/
function esProductivo(programador){
    if (quemades<=energia) return true;
    else return false;
}


/*

3) Crear una función "tomarCafe", la cual recibe un programador, y retorna un programador con
nivel de quemadés con 2 niveles menos de los que tenía, y energia con 3 niveles más de lo que tenía.

4) Crear una funcíon "programar", la cual recibe un programador y un número de horas trabajadas,
y retorna un programador con 1 nivel de energia menos por cada hora trabajada, y 2 niveles de quemades más por hora trabajada.

5) Crear una función "dormir", la cual recibe un programador y un número de horas dormidas, y retorna un programador
con 1 nivel de energia más por hora dormida, y 2 niveles de quemades menos por hora dormida.

6) Crear una función "simularDespido", que reciba un programador, y si luego de tomar cafe y dormir 2 horas no
es productivo, retorne un programador no empleado, de lo contrario retornar el mismo programador.

7) Crear una función "simularContratacion", que reciba un programador, y si su nivel de energia es mayor a 8, su
quemadés es menor a 2, y no es empleado, que retorne un programador empleado.

8) Crear una función "accion", que reciba un programador y una función de las anteriores creadas como parámetros.
La misma debe imprimir por consola el programador, luego ejecutar la función recibida por parámetro
con el programador, y finalmente otra impresión por consola del programador.
*/
